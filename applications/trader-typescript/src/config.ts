/*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import * as fs from 'fs';
import * as path from 'path';

export const channelName = process.env.CHANNEL_NAME ?? 'mychannel';
export const chaincodeName = process.env.CHAINCODE_NAME ?? 'asset-transfer';

// Default configuration below as a convenience for when run using fabric samples test-network and credentials
// generated by cryptogen. In this case, specifying only the CRYPTO_PATH environment is sufficient.

const defaultOrgAddress = 'org1.example.com';
const defaultPeerName = `peer0.${defaultOrgAddress}`;

const cryptoPath = path.resolve(process.env.CRYPTO_PATH ?? path.resolve(__dirname, '..', '..', '..', '..', 'fabric-samples', 'test-network', 'organizations', 'peerOrganizations', defaultOrgAddress));

export const defaultClientCertificate = path.resolve(__dirname, cryptoPath, 'users', `User1@${defaultOrgAddress}`, 'msp', 'signcerts', 'cert.pem');
export const defaultTlsCertificate = path.resolve(__dirname, cryptoPath, 'peers', defaultPeerName, 'tls', 'ca.crt');

export function locatePrivateKey(): string {
    const keyDirectoryPath = path.resolve(process.env.KEY_DIRECTORY_PATH ?? path.resolve(__dirname, cryptoPath, 'users', 'User1@org1.example.com', 'msp', 'keystore'));
    const keyFiles = fs.readdirSync(keyDirectoryPath);
    if (keyFiles.length === 0) {
        throw new Error(`No private key files found in directory ${keyDirectoryPath}`);
    }

    return path.resolve(keyDirectoryPath, keyFiles[0]);
}
